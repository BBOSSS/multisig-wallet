{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/MultiSigWallet.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract MultiSigWallet {\n\tusing ECDSA for bytes32;\n\tenum Role {\n\t\tDefault,\n\t\tAdmin, // can execute and sign transaction\n\t\tSigner // can sign transaction\n\t}\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent Deposit(address indexed sender, uint256 amount, uint256 balance);\n\tevent Withdraw(address indexed to, uint256 amount, uint256 balance);\n\tevent AddOwner(address indexed owner, Role role);\n\tevent RemoveOwner(address indexed owner, Role role);\n\tevent ExecuteTransaction(\n\t\taddress indexed owner,\n\t\taddress payable to,\n\t\tuint256 value,\n\t\tbytes data,\n\t\tuint256 nonce,\n\t\tbytes32 _hash,\n\t\tbytes result\n\t);\n\n\t// State Variables\n\taddress internal singleton; // slot 0 for proxy\n\taddress internal factory; // slot 1 for factory\n\tuint256 private totalSigner;\n\tuint256 private signaturesRequired;\n\tuint256 private nonce;\n\tuint256 private chainId;\n\tmapping(address => bool) private ownerMap;\n\tmapping(address => Role) private roleMap;\n\tbool private initialized;\n\n\t// Constructor: Called once on contract deployment\n\tconstructor() {}\n\n\tmodifier onlySelf() {\n\t\trequire(msg.sender == address(this), \"Not self\");\n\t\t_;\n\t}\n\n\tfunction init(\n\t\taddress[] memory owners,\n\t\tRole[] memory roles,\n\t\tuint256 _signaturesRequired\n\t) public {\n\t\trequire(!initialized, \"Already initialized\");\n\t\tinitialized = true;\n\t\trequire(msg.sender == factory, \"Not Creator\");\n\t\trequire(\n\t\t\towners.length == roles.length,\n\t\t\t\"Owners length don't match roles length\"\n\t\t);\n\t\trequire(\n\t\t\t_signaturesRequired <= owners.length && _signaturesRequired > 0,\n\t\t\t\"signaturesRequired must in (0, totalSigner]\"\n\t\t);\n\t\ttotalSigner = owners.length;\n\t\tsignaturesRequired = _signaturesRequired;\n\t\tfor (uint256 i = 0; i < totalSigner; i++) {\n\t\t\taddress addr = owners[i];\n\t\t\trequire(!ownerMap[addr], \"duplicate owner\");\n\t\t\townerMap[addr] = true;\n\t\t\troleMap[addr] = roles[i];\n\t\t\temit AddOwner(addr, roles[i]);\n\t\t}\n\t}\n\n\t// create or update\n\tfunction addOwner(\n\t\taddress addr,\n\t\tRole role,\n\t\tuint256 _signaturesRequired\n\t) public onlySelf {\n\t\tif (!ownerMap[addr]) {\n\t\t\ttotalSigner += 1;\n\t\t}\n\t\trequire(\n\t\t\t_signaturesRequired <= totalSigner && _signaturesRequired > 0,\n\t\t\t\"signaturesRequired must in (0, totalSigner]\"\n\t\t);\n\t\tsignaturesRequired = _signaturesRequired;\n\t\townerMap[addr] = true;\n\t\troleMap[addr] = role;\n\t\temit AddOwner(addr, role);\n\t}\n\n\tfunction removeOwner(\n\t\taddress addr,\n\t\tuint256 _signaturesRequired\n\t) public onlySelf {\n\t\trequire(ownerMap[addr], \"Not Owner\");\n\t\trequire(totalSigner > 1, \"Keep at least 1 owner\");\n\t\ttotalSigner -= 1;\n\t\trequire(\n\t\t\t_signaturesRequired <= totalSigner && _signaturesRequired > 0,\n\t\t\t\"signaturesRequired must in (0, totalSigner]\"\n\t\t);\n\t\tsignaturesRequired = _signaturesRequired;\n\t\tdelete ownerMap[addr];\n\t\tRole role = roleMap[addr];\n\t\tdelete roleMap[addr];\n\t\temit RemoveOwner(addr, role);\n\t}\n\n\tfunction getTransactionHash(\n\t\tuint256 _nonce,\n\t\taddress to,\n\t\tuint256 value,\n\t\tbytes memory data\n\t) public view returns (bytes32) {\n\t\tbytes memory packed = abi.encodePacked(\n\t\t\taddress(this),\n\t\t\tchainId,\n\t\t\t_nonce,\n\t\t\tto,\n\t\t\tvalue,\n\t\t\tdata\n\t\t);\n\t\treturn keccak256(packed);\n\t}\n\n\tfunction executeTransaction(\n\t\tuint256 _nonce,\n\t\taddress payable to,\n\t\tuint256 value,\n\t\tbytes memory data,\n\t\tbytes[] memory signatures\n\t) public returns (bytes memory) {\n\t\trequire(\n\t\t\townerMap[msg.sender] && roleMap[msg.sender] == Role.Admin,\n\t\t\t\"executeTransaction: only admin can execute\"\n\t\t);\n\t\tbytes32 _hash = getTransactionHash(_nonce, to, value, data);\n\t\tnonce++;\n\t\taddress preAddr;\n\t\tuint256 validSignatures = 0;\n\t\tfor (uint256 i = 0; i < signatures.length; i++) {\n\t\t\taddress addr = recover(_hash, signatures[i]);\n\t\t\trequire(\n\t\t\t\taddr > preAddr,\n\t\t\t\t\"executeTransaction: duplicate or unordered signatures\"\n\t\t\t);\n\t\t\tif (!ownerMap[addr]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvalidSignatures++;\n\t\t\tpreAddr = addr;\n\t\t}\n\t\trequire(\n\t\t\tvalidSignatures >= signaturesRequired,\n\t\t\t\"executeTransaction: not enough valid signatures\"\n\t\t);\n\n\t\t(bool success, bytes memory result) = to.call{ value: value }(data);\n\t\trequire(success, \"executeTransaction: tx failed\");\n\n\t\temit ExecuteTransaction(\n\t\t\tmsg.sender,\n\t\t\tto,\n\t\t\tvalue,\n\t\t\tdata,\n\t\t\tnonce - 1,\n\t\t\t_hash,\n\t\t\tresult\n\t\t);\n\t\treturn result;\n\t}\n\n\tfunction recover(\n\t\tbytes32 _hash,\n\t\tbytes memory _signature\n\t) public pure returns (address) {\n\t\treturn _hash.toEthSignedMessageHash().recover(_signature);\n\t}\n\n\t/**\n\t * Function that allows the owner to withdraw all the Ether in the contract\n\t * The function can only be called by the owner of the contract as defined by the isOwner modifier\n\t */\n\tfunction withdraw(address to, uint256 amount) public onlySelf {\n\t\tuint256 balance = address(this).balance;\n\t\trequire(amount <= balance, \"Insufficient balance\");\n\t\t(bool success, ) = payable(to).call{ value: balance }(\"\");\n\t\trequire(success, \"Failed to send Ether\");\n\t\temit Withdraw(to, amount, address(this).balance);\n\t}\n\n\tfunction getTotalSigner() public view returns (uint256) {\n\t\treturn totalSigner;\n\t}\n\n\tfunction getSignaturesrequired() public view returns (uint256) {\n\t\treturn signaturesRequired;\n\t}\n\n\tfunction getNonce() public view returns (uint256) {\n\t\treturn nonce;\n\t}\n\n\tfunction getChainId() public view returns (uint256) {\n\t\treturn chainId;\n\t}\n\n\tfunction isOwner(address addr) public view returns (bool) {\n\t\treturn ownerMap[addr];\n\t}\n\n\tfunction getRole(address addr) public view returns (Role) {\n\t\t// require(isOwner(addr), \"Not owner\");\n\t\treturn roleMap[addr];\n\t}\n\n\t/**\n\t * Function that allows the contract to receive ETH\n\t */\n\treceive() external payable {\n\t\temit Deposit(msg.sender, msg.value, address(this).balance);\n\t}\n}\n"
    },
    "contracts/WalletFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./WalletProxy.sol\";\nimport \"./MultiSigWallet.sol\";\n\ncontract WalletFactory {\n\tfunction createWallet(\n\t\taddress singleton,\n\t\taddress[] memory owners,\n\t\tMultiSigWallet.Role[] memory roles,\n\t\tuint256 signaturesRequired\n\t) external returns (address) {\n\t\t// 生成salt\n\t\tbytes32 _salt = keccak256(\n\t\t\tabi.encodePacked(singleton, owners, roles, signaturesRequired)\n\t\t);\n\t\t// 用create2部署新合约\n\t\tWalletProxy proxy = new WalletProxy{ salt: _salt }(singleton);\n\t\t// 调用新合约的initialize方法\n\t\t// proxy.init(owners, roles, signaturesRequired);\n\t\tbytes4 selector = MultiSigWallet.init.selector;\n\t\tbytes memory data = abi.encodeWithSelector(\n\t\t\tselector,\n\t\t\towners,\n\t\t\troles,\n\t\t\tsignaturesRequired\n\t\t);\n\t\t(bool success, ) = address(proxy).call(data);\n\t\trequire(success, \"Initialize failed\");\n\t\treturn address(proxy);\n\t}\n}\n"
    },
    "contracts/WalletProxy.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IProxy {\n\tfunction masterCopy() external view returns (address);\n}\n\ncontract WalletProxy {\n\t// singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n\t// To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n\taddress internal singleton; // slot 0 for proxy\n\taddress internal factory; // slot 1 for factory\n\n\t/// @dev Constructor function sets address of singleton contract.\n\t/// @param _singleton Singleton address.\n\tconstructor(address _singleton) {\n\t\trequire(_singleton != address(0), \"Invalid singleton address provided\");\n\t\tsingleton = _singleton;\n\t\tfactory = msg.sender;\n\t}\n\n\t/// @dev Fallback function forwards all transactions and returns all received return data.\n\tfallback() external payable {\n\t\t// solhint-disable-next-line no-inline-assembly\n\t\tassembly {\n\t\t\tlet _singleton := and(\n\t\t\t\tsload(0),\n\t\t\t\t0xffffffffffffffffffffffffffffffffffffffff\n\t\t\t)\n\t\t\t// 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\n\t\t\tif eq(\n\t\t\t\tcalldataload(0),\n\t\t\t\t0xa619486e00000000000000000000000000000000000000000000000000000000\n\t\t\t) {\n\t\t\t\tmstore(0, _singleton)\n\t\t\t\treturn(0, 0x20)\n\t\t\t}\n\t\t\tcalldatacopy(0, 0, calldatasize())\n\t\t\tlet success := delegatecall(\n\t\t\t\tgas(),\n\t\t\t\t_singleton,\n\t\t\t\t0,\n\t\t\t\tcalldatasize(),\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t)\n\t\t\treturndatacopy(0, 0, returndatasize())\n\t\t\tif eq(success, 0) {\n\t\t\t\trevert(0, returndatasize())\n\t\t\t}\n\t\t\treturn(0, returndatasize())\n\t\t}\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}